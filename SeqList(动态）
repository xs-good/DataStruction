#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <stdlib.h>
#define MAX 10
#define INC 2
typedef int DataType;
typedef struct
{
	DataType* data;
	int size;
	int capacity;
}SeqList;
void InitSeqList(SeqList* L)
{
	L->data = (DataType*)malloc(sizeof(DataType) * MAX);
	if (L->data == NULL)
	{
		printf("内存分配失败");
		return;
	}
	L->size = 0;
	L->capacity = MAX;
}
void CheckExpand(SeqList* L)
{
	if (L->size == L->capacity)
	{
		DataType* tmp = (DataType*)realloc(L->data,sizeof(DataType) * (L->capacity + INC));
		if (tmp)
		{
			L->data = tmp;
			L->capacity += INC;
		}
	}
}
void PushBack(SeqList* L,DataType elem)
{
	CheckExpand(L);
	L->data[L->size] = elem;
	L->size++;
}
void PopBack(SeqList* L)
{
	if (L->size == 0)
	{
		return;
	}
	L->size--;
}
void PushFront(SeqList* L, DataType elem)
{
	CheckExpand(L);
	int i = 0;
	for (i = L->size; i >= 0; i--)
	{
		L->data[i + 1] = L->data[i];
	}
	L->data[0] = elem;
	L->size++;
}
void PopFront(SeqList* L)
{
	if (L->size == 0)
	{
		return;
	}
	int i = 0;
	for (i = 0; i < L->size - 1;i++)
	{
		L->data[i] = L->data[i + 1];
	}
	L->size--;
}
void InsertSeqList(SeqList* L, int pos, DataType elem)
{
	CheckExpand(L);
	int i = 0;
	for (i = L->size - 1; i >= pos; i--)
	{
		L->data[i + 1] = L->data[i];
	}
	L->data[pos] = elem;
	L->size++;
}
int Find(SeqList* L, DataType elem)
{
	int i = 0;
	for (i = 0; i < L->size; i++)
	{
		if (L->data[i] = elem)
		{
			return i;
		}
	}
	return -1;
}
void RemoveSeqList(SeqList* L,DataType elem)
{
	int ret = Find(L, elem);
	if (L->size == 0||ret<0)
	{
		return;
	}
	int i = 0;
	for (i = ret; i < L->size - 1; i--)
	{
		L->data[i] = L->data[i + 1];
	}
}
void DistroySeqList(SeqList* L)
{
	free(L->data);
	L->data = NULL;
	L->size = 0;
	L->capacity = 0;
}
int main()
{

	return 0;
}
